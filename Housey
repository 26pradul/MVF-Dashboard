import React, { useState, useEffect } from 'react';
import { 
  Home, 
  Thermometer, 
  Lightbulb, 
  Droplets, 
  TrendingUp, 
  Bell, 
  BarChart3,
  Settings,
  Power,
  Fan,
  Leaf,
  Camera,
  Download,
  Calendar,
  Target,
  Zap
} from 'lucide-react';

const VerticalFarmDashboard = () => {
  const [activeView, setActiveView] = useState('home');
  const [currentTime, setCurrentTime] = useState(new Date());
  const [sensorData, setSensorData] = useState({
    temperature: 24.5,
    humidity: 65,
    lightStatus: 'ON',
    lightIntensity: 85,
    waterLevel: 78,
    nutrientLevel: 92,
    fanSpeed: 45
  });

  // Simulate real-time data updates
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentTime(new Date());
      setSensorData(prev => ({
        ...prev,
        temperature: 24.5 + (Math.random() - 0.5) * 2,
        humidity: 65 + (Math.random() - 0.5) * 10,
        lightIntensity: prev.lightIntensity + (Math.random() - 0.5) * 5
      }));
    }, 5000);
    return () => clearInterval(interval);
  }, []);

  const navigationItems = [
    { id: 'home', label: 'Overview', icon: Home },
    { id: 'environment', label: 'Environment', icon: Thermometer },
    { id: 'lighting', label: 'Lighting', icon: Lightbulb },
    { id: 'irrigation', label: 'Irrigation', icon: Droplets },
    { id: 'growth', label: 'Growth Tracking', icon: Leaf },
    { id: 'alerts', label: 'Alerts', icon: Bell },
    { id: 'analytics', label: 'Analytics', icon: BarChart3 }
  ];

  const StatusCard = ({ title, value, unit, status, icon: Icon, onClick }) => {
    const statusColors = {
      optimal: 'border-green-400 bg-green-900/20',
      caution: 'border-yellow-400 bg-yellow-900/20',
      alert: 'border-red-400 bg-red-900/20'
    };
    
    return (
      <div 
        className={`p-4 rounded-lg border-2 ${statusColors[status]} cursor-pointer hover:opacity-80 transition-opacity`}
        onClick={onClick}
      >
        <div className="flex items-center justify-between mb-2">
          <Icon className="w-6 h-6 text-blue-400" />
          <span className={`px-2 py-1 rounded text-xs ${
            status === 'optimal' ? 'bg-green-500/20 text-green-400' :
            status === 'caution' ? 'bg-yellow-500/20 text-yellow-400' :
            'bg-red-500/20 text-red-400'
          }`}>
            {status.toUpperCase()}
          </span>
        </div>
        <h3 className="text-sm text-gray-300 mb-1">{title}</h3>
        <p className="text-2xl font-bold text-white">{value}{unit}</p>
      </div>
    );
  };

  const QuickActionButton = ({ icon: Icon, label, active, onClick }) => (
    <button 
      onClick={onClick}
      className={`flex flex-col items-center p-3 rounded-lg border transition-all ${
        active 
          ? 'border-green-400 bg-green-900/30 text-green-400' 
          : 'border-gray-600 bg-gray-800/50 text-gray-300 hover:border-blue-400'
      }`}
    >
      <Icon className="w-6 h-6 mb-2" />
      <span className="text-xs">{label}</span>
    </button>
  );

  const renderHomeView = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold text-white">Farm Overview</h1>
        <div className="text-right">
          <p className="text-gray-300">Last Updated</p>
          <p className="text-white font-mono">{currentTime.toLocaleTimeString()}</p>
        </div>
      </div>

      {/* Status Cards Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <StatusCard 
          title="Temperature" 
          value={sensorData.temperature.toFixed(1)} 
          unit="°C" 
          status="optimal" 
          icon={Thermometer}
          onClick={() => setActiveView('environment')}
        />
        <StatusCard 
          title="Humidity" 
          value={sensorData.humidity.toFixed(0)} 
          unit="%RH" 
          status="optimal" 
          icon={Droplets}
          onClick={() => setActiveView('environment')}
        />
        <StatusCard 
          title="Light Intensity" 
          value={sensorData.lightIntensity.toFixed(0)} 
          unit="%" 
          status="optimal" 
          icon={Lightbulb}
          onClick={() => setActiveView('lighting')}
        />
        <StatusCard 
          title="Water Level" 
          value={sensorData.waterLevel} 
          unit="%" 
          status={sensorData.waterLevel < 30 ? 'caution' : 'optimal'} 
          icon={Droplets}
          onClick={() => setActiveView('irrigation')}
        />
      </div>

      {/* 24h Timeline */}
      <div className="bg-gray-800/50 rounded-lg p-6">
        <h2 className="text-xl font-semibold text-white mb-4">Today's Activity Timeline</h2>
        <div className="relative h-20 bg-gray-900 rounded-lg overflow-hidden">
          {/* Timeline visualization */}
          <div className="absolute inset-0 flex">
            {Array.from({length: 24}, (_, i) => (
              <div key={i} className="flex-1 border-r border-gray-700 relative">
                {i >= 6 && i <= 18 && (
                  <div className="absolute top-0 left-0 right-0 h-1/3 bg-yellow-400/30"></div>
                )}
                {(i === 8 || i === 16) && (
                  <div className="absolute bottom-0 left-0 right-0 h-1/3 bg-blue-400/30"></div>
                )}
              </div>
            ))}
          </div>
          <div className="absolute bottom-2 left-4 text-xs text-gray-400">
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-1">
                <div className="w-3 h-3 bg-yellow-400/30 rounded"></div>
                <span>Light On</span>
              </div>
              <div className="flex items-center gap-1">
                <div className="w-3 h-3 bg-blue-400/30 rounded"></div>
                <span>Irrigation</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="bg-gray-800/50 rounded-lg p-6">
        <h2 className="text-xl font-semibold text-white mb-4">Quick Actions</h2>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <QuickActionButton 
            icon={Power} 
            label="Toggle Lights" 
            active={sensorData.lightStatus === 'ON'}
            onClick={() => setSensorData(prev => ({
              ...prev, 
              lightStatus: prev.lightStatus === 'ON' ? 'OFF' : 'ON'
            }))}
          />
          <QuickActionButton 
            icon={Droplets} 
            label="Start Watering" 
            active={false}
          />
          <QuickActionButton 
            icon={Fan} 
            label="Adjust Fan" 
            active={sensorData.fanSpeed > 0}
          />
          <QuickActionButton 
            icon={Camera} 
            label="Take Photo" 
            active={false}
          />
        </div>
      </div>
    </div>
  );

  const renderEnvironmentView = () => (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-white">Environmental Control</h1>
      
      {/* Live readings */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="bg-gray-800/50 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-white mb-4">Temperature Control</h3>
          <div className="space-y-4">
            <div className="text-center">
              <span className="text-4xl font-bold text-green-400">{sensorData.temperature.toFixed(1)}°C</span>
            </div>
            <div className="space-y-2">
              <label className="text-sm text-gray-300">Target Range</label>
              <div className="flex gap-2">
                <input type="number" className="flex-1 bg-gray-700 text-white p-2 rounded" defaultValue="22" />
                <span className="text-gray-400 py-2">-</span>
                <input type="number" className="flex-1 bg-gray-700 text-white p-2 rounded" defaultValue="26" />
              </div>
            </div>
            <label className="flex items-center space-x-2">
              <input type="checkbox" className="rounded" defaultChecked />
              <span className="text-gray-300">Auto Control</span>
            </label>
          </div>
        </div>

        <div className="bg-gray-800/50 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-white mb-4">Humidity Control</h3>
          <div className="space-y-4">
            <div className="text-center">
              <span className="text-4xl font-bold text-blue-400">{sensorData.humidity.toFixed(0)}%</span>
            </div>
            <div className="space-y-2">
              <label className="text-sm text-gray-300">Target Range</label>
              <div className="flex gap-2">
                <input type="number" className="flex-1 bg-gray-700 text-white p-2 rounded" defaultValue="60" />
                <span className="text-gray-400 py-2">-</span>
                <input type="number" className="flex-1 bg-gray-700 text-white p-2 rounded" defaultValue="70" />
              </div>
            </div>
            <label className="flex items-center space-x-2">
              <input type="checkbox" className="rounded" defaultChecked />
              <span className="text-gray-300">Auto Control</span>
            </label>
          </div>
        </div>
      </div>

      {/* Fan Control */}
      <div className="bg-gray-800/50 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-white mb-4">Ventilation Control</h3>
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <span className="text-gray-300">Fan Speed</span>
            <span className="text-white font-bold">{sensorData.fanSpeed}%</span>
          </div>
          <input 
            type="range" 
            min="0" 
            max="100" 
            value={sensorData.fanSpeed}
            onChange={(e) => setSensorData(prev => ({...prev, fanSpeed: parseInt(e.target.value)}))}
            className="w-full"
          />
        </div>
      </div>

      {/* Graph placeholder */}
      <div className="bg-gray-800/50 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-white mb-4">24-Hour Trends</h3>
        <div className="h-64 bg-gray-900 rounded flex items-center justify-center">
          <TrendingUp className="w-12 h-12 text-gray-600" />
          <span className="ml-2 text-gray-500">Temperature & Humidity Graph</span>
        </div>
      </div>
    </div>
  );

  const renderLightingView = () => (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-white">Lighting Management</h1>
      
      {/* Current Status */}
      <div className="bg-gray-800/50 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-white mb-4">Current Status</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="text-center">
            <p className="text-gray-300">Status</p>
            <p className={`text-2xl font-bold ${sensorData.lightStatus === 'ON' ? 'text-yellow-400' : 'text-gray-500'}`}>
              {sensorData.lightStatus}
            </p>
          </div>
          <div className="text-center">
            <p className="text-gray-300">Intensity</p>
            <p className="text-2xl font-bold text-white">{sensorData.lightIntensity.toFixed(0)}%</p>
          </div>
          <div className="text-center">
            <p className="text-gray-300">Power Usage</p>
            <p className="text-2xl font-bold text-green-400">42W</p>
          </div>
        </div>
      </div>

      {/* Lighting Schedule */}
      <div className="bg-gray-800/50 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-white mb-4">Lighting Schedule</h3>
        <div className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm text-gray-300 mb-1">Lights On</label>
              <input type="time" className="w-full bg-gray-700 text-white p-2 rounded" defaultValue="06:00" />
            </div>
            <div>
              <label className="block text-sm text-gray-300 mb-1">Lights Off</label>
              <input type="time" className="w-full bg-gray-700 text-white p-2 rounded" defaultValue="18:00" />
            </div>
          </div>
          <div>
            <label className="block text-sm text-gray-300 mb-2">Intensity</label>
            <input type="range" min="0" max="100" defaultValue="85" className="w-full" />
          </div>
        </div>
      </div>

      {/* Spectrum Control */}
      <div className="bg-gray-800/50 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-white mb-4">Light Spectrum</h3>
        <div className="space-y-4">
          <div>
            <div className="flex justify-between items-center mb-2">
              <span className="text-red-400">Red</span>
              <span className="text-white">65%</span>
            </div>
            <input type="range" min="0" max="100" defaultValue="65" className="w-full" />
          </div>
          <div>
            <div className="flex justify-between items-center mb-2">
              <span className="text-blue-400">Blue</span>
              <span className="text-white">35%</span>
            </div>
            <input type="range" min="0" max="100" defaultValue="35" className="w-full" />
          </div>
          <div>
            <div className="flex justify-between items-center mb-2">
              <span className="text-green-400">Green</span>
              <span className="text-white">20%</span>
            </div>
            <input type="range" min="0" max="100" defaultValue="20" className="w-full" />
          </div>
        </div>
      </div>
    </div>
  );

  const renderIrrigationView = () => (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-white">Irrigation & Nutrients</h1>
      
      {/* Status Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="bg-gray-800/50 rounded-lg p-6 text-center">
          <Droplets className="w-8 h-8 text-blue-400 mx-auto mb-2" />
          <h3 className="text-lg font-semibold text-white">Water Level</h3>
          <p className="text-3xl font-bold text-blue-400">{sensorData.waterLevel}%</p>
        </div>
        <div className="bg-gray-800/50 rounded-lg p-6 text-center">
          <Leaf className="w-8 h-8 text-green-400 mx-auto mb-2" />
          <h3 className="text-lg font-semibold text-white">Nutrients</h3>
          <p className="text-3xl font-bold text-green-400">{sensorData.nutrientLevel}%</p>
        </div>
        <div className="bg-gray-800/50 rounded-lg p-6 text-center">
          <Target className="w-8 h-8 text-yellow-400 mx-auto mb-2" />
          <h3 className="text-lg font-semibold text-white">pH Level</h3>
          <p className="text-3xl font-bold text-yellow-400">6.2</p>
        </div>
      </div>

      {/* Irrigation Schedule */}
      <div className="bg-gray-800/50 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-white mb-4">Irrigation Schedule</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm text-gray-300 mb-1">Frequency (hours)</label>
            <input type="number" className="w-full bg-gray-700 text-white p-2 rounded" defaultValue="8" />
          </div>
          <div>
            <label className="block text-sm text-gray-300 mb-1">Duration (minutes)</label>
            <input type="number" className="w-full bg-gray-700 text-white p-2 rounded" defaultValue="5" />
          </div>
        </div>
        <div className="mt-4">
          <button className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-colors">
            Start Manual Watering
          </button>
        </div>
      </div>

      {/* Next scheduled watering */}
      <div className="bg-gray-800/50 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-white mb-2">Next Scheduled Watering</h3>
        <div className="flex items-center space-x-4">
          <Calendar className="w-6 h-6 text-blue-400" />
          <div>
            <p className="text-white font-semibold">Today at 2:00 PM</p>
            <p className="text-gray-300 text-sm">In 3 hours 24 minutes</p>
          </div>
        </div>
      </div>
    </div>
  );

  const renderGrowthView = () => (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-white">Growth Tracking</h1>
      
      {/* Plant Stage */}
      <div className="bg-gray-800/50 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-white mb-4">Current Crop</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label className="block text-sm text-gray-300 mb-1">Crop Type</label>
            <select className="w-full bg-gray-700 text-white p-2 rounded">
              <option>Lettuce</option>
              <option>Basil</option>
              <option>Spinach</option>
              <option>Arugula</option>
            </select>
          </div>
          <div>
            <label className="block text-sm text-gray-300 mb-1">Growth Stage</label>
            <select className="w-full bg-gray-700 text-white p-2 rounded">
              <option>Seedling</option>
              <option>Vegetative</option>
              <option>Flowering</option>
              <option>Harvest Ready</option>
            </select>
          </div>
          <div>
            <label className="block text-sm text-gray-300 mb-1">Days Since Planted</label>
            <input type="number" className="w-full bg-gray-700 text-white p-2 rounded" defaultValue="14" />
          </div>
        </div>
      </div>

      {/* Harvest Countdown */}
      <div className="bg-gray-800/50 rounded-lg p-6 text-center">
        <h3 className="text-lg font-semibold text-white mb-2">Estimated Harvest</h3>
        <p className="text-4xl font-bold text-green-400 mb-2">16 Days</p>
        <p className="text-gray-300">Based on current growth conditions</p>
      </div>

      {/* Image Log */}
      <div className="bg-gray-800/50 rounded-lg p-6">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-semibold text-white">Growth Photos</h3>
          <button className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2">
            <Camera className="w-4 h-4" />
            <span>Take Photo</span>
          </button>
        </div>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          {[1,2,3,4].map(i => (
            <div key={i} className="bg-gray-900 rounded-lg h-32 flex items-center justify-center">
              <Camera className="w-8 h-8 text-gray-600" />
            </div>
          ))}
        </div>
      </div>

      {/* Yield Prediction */}
      <div className="bg-gray-800/50 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-white mb-4">Yield Prediction</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="text-center">
            <p className="text-gray-300">Estimated Yield</p>
            <p className="text-3xl font-bold text-green-400">450g</p>
          </div>
          <div className="text-center">
            <p className="text-gray-300">Confidence</p>
            <p className="text-3xl font-bold text-blue-400">87%</p>
          </div>
        </div>
      </div>
    </div>
  );

  const renderAlertsView = () => (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-white">Alerts & Notifications</h1>
      
      {/* Active Alerts */}
      <div className="bg-gray-800/50 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-white mb-4">Active Alerts</h3>
        <div className="space-y-3">
          <div className="flex items-center space-x-3 p-3 bg-yellow-900/20 border border-yellow-400 rounded-lg">
            <Bell className="w-5 h-5 text-yellow-400" />
            <div className="flex-1">
              <p className="text-yellow-400 font-semibold">Water Level Low</p>
              <p className="text-gray-300 text-sm">Water tank is at 28%. Consider refilling soon.</p>
            </div>
            <span className="text-xs text-gray-400">5 min ago</span>
          </div>
        </div>
      </div>

      {/* Alert Settings */}
      <div className="bg-gray-800/50 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-white mb-4">Notification Settings</h3>
        <div className="space-y-4">
          <label className="flex items-center justify-between">
            <span className="text-gray-300">Temperature Alerts</span>
            <input type="checkbox" className="rounded" defaultChecked />
          </label>
          <label className="flex items-center justify-between">
            <span className="text-gray-300">Humidity Alerts</span>
            <input type="checkbox" className="rounded" defaultChecked />
          </label>
          <label className="flex items-center justify-between">
            <span className="text-gray-300">Water Level Alerts</span>
            <input type="checkbox" className="rounded" defaultChecked />
          </label>
          <label className="flex items-center justify-between">
            <span className="text-gray-300">Nutrient Alerts</span>
            <input type="checkbox" className="rounded" defaultChecked />
          </label>
          <label className="flex items-center justify-between">
            <span className="text-gray-300">Growth Milestone Alerts</span>
            <input type="checkbox" className="rounded" defaultChecked />
          </label>
        </div>
      </div>
    </div>
  );

  const renderAnalyticsView = () => (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-white">Data & Analytics</h1>
      
      {/* Summary Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="bg-gray-800/50 rounded-lg p-6 text-center">
          <Zap className="w-8 h-8 text-yellow-400 mx-auto mb-2" />
          <h3 className="text-lg font-semibold text-white">Energy Usage</h3>
          <p className="text-2xl font-bold text-yellow-400">1.2 kWh</p>
          <p className="text-sm text-gray-400">Today</p>
        </div>
        <div className="bg-gray-800/50 rounded-lg p-6 text-center">
          <Droplets className="w-8 h-8 text-blue-400 mx-auto mb-2" />
          <h3 className="text-lg font-semibold text-white">Water Usage</h3>
          <p className="text-2xl font-bold text-blue-400">2.5L</p>
          <p className="text-sm text-gray-400">Today</p>
        </div>
        <div className="bg-gray-800/50 rounded-lg p-6 text-center">
          <TrendingUp className="w-8 h-8 text-green-400 mx-auto mb-2" />
          <h3 className="text-lg font-semibold text-white">Growth Rate</h3>
          <p className="text-2xl font-bold text-green-400">+12%</p>
          <p className="text-sm text-gray-400">This week</p>
        </div>
        <div className="bg-gray-800/50 rounded-lg p-6 text-center">
          <Target className="w-8 h-8 text-purple-400 mx-auto mb-2" />
          <h3 className="text-lg font-semibold text-white">Efficiency</h3>
          <p className="text-2xl font-bold text-purple-400">94%</p>
          <p className="text-sm text-gray-400">Overall</p>
        </div>
      </div>

      {/* Charts placeholder */}
      <div className="bg-gray-800/50 rounded-lg p-6">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-semibold text-white">Historical Data</h3>
          <div className="flex space-x-2">
            <button className="px-3 py-1 bg-blue-600 text-white rounded text-sm">24H</button>
            <button className="px-3 py-1 bg-gray-600 text-gray-300 rounded text-sm">7D</button>
            <button className="px-3 py-1 bg-gray-600 text-gray-300 rounded text-sm">30D</button>
          </div>
        </div>
        <div className="h-64 bg-gray-900 rounded flex items-center justify-center">
          <BarChart3 className="w-12 h-12 text-gray-600" />
          <span className="ml-2 text-gray-500">Multi-parameter Chart View</span>
        </div>
      </div>

      {/* Export Options */}
      <div className="bg-gray-800/50 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-white mb-4">Export Data</h3>
        <div className="flex space-x-4">
          <button className="flex items-center space-x-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors">
            <Download className="w-4 h-4" />
            <span>Export CSV</span>
          </button>
          <button className="flex items-center space-x-2 px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors">
            <Download className="w-4 h-4" />
            <span>Export PDF Report</span>
          </button>
        </div>
      </div>

      {/* AI Suggestions */}
      <div className="bg-gray-800/50 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-white mb-4">AI Optimization Suggestions</h3>
        <div className="space-y-3">
          <div className="p-3 bg-blue-900/20 border border-blue-400 rounded-lg">
            <p className="text-blue-400 font-semibold">💡 Lighting Optimization</p>
            <p className="text-gray-300 text-sm">Consider reducing light intensity by 10% during week 3-4 to improve energy efficiency while maintaining growth rate.</p>
          </div>
          <div className="p-3 bg-green-900/20 border border-green-400 rounded-lg">
            <p className="text-green-400 font-semibold">💧 Water Efficiency</p>
            <p className="text-gray-300 text-sm">Your irrigation schedule is optimal. Current water usage is 15% below average for lettuce crops.</p>
          </div>
        </div>
      </div>
    </div>
  );

  const renderView = () => {
    switch(activeView) {
      case 'home': return renderHomeView();
      case 'environment': return renderEnvironmentView();
      case 'lighting': return renderLightingView();
      case 'irrigation': return renderIrrigationView();
      case 'growth': return renderGrowthView();
      case 'alerts': return renderAlertsView();
      case 'analytics': return renderAnalyticsView();
      default: return renderHomeView();
    }
  };

  return (
    <div className="min-h-screen bg-gray-900 flex">
      {/* Sidebar Navigation */}
      <div className="w-64 bg-gray-800 border-r border-gray-700 p-4">
        <div className="mb-8">
          <h2 className="text-xl font-bold text-white flex items-center space-x-2">
            <Leaf className="w-6 h-6 text-green-400" />
            <span>Vertical Farm</span>
          </h2>
          <p className="text-sm text-gray-400">Smart Growing System</p>
        </div>
        
        <nav className="space-y-2">
          {navigationItems.map(item => {
            const Icon = item.icon;
            return (
              <button
                key={item.id}
                onClick={() => setActiveView(item.id)}
                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg text-left transition-colors ${
                  activeView === item.id 
                    ? 'bg-green-600 text-white' 
                    : 'text-gray-300 hover:bg-gray-700 hover:text-white'
                }`}
              >
                <Icon className="w-5 h-5" />
                <span>{item.label}</span>
              </button>
            );
          })}
        </nav>

        {/* System Status */}
        <div className="mt-8 p-3 bg-gray-900 rounded-lg">
          <div className="flex items-center space-x-2 mb-2">
            <div className="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
            <span className="text-sm text-gray-300">System Online</span>
          </div>
          <p className="text-xs text-gray-400">Last sync: {currentTime.toLocaleTimeString()}</p>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 p-6 overflow-y-auto">
        {renderView()}
      </div>
    </div>
  );
};

export default VerticalFarmDashboard;
